

1. users 테이블 (기존 테이블 확장)
users 테이블은 회원 정보를 관리하고, 추천인 및 직급 관리 등을 포함할 수 있습니다. 추천인 관계는 이미 referred_by 컬럼을 통해 관리되므로 referral_tree 테이블은 필요하지 않습니다. 단, 직급, 포인트, 수수료 관련 컬럼을 추가할 필요가 있습니다.
---------------------------

CREATE TABLE `users` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(100) NOT NULL,
  `email` varchar(100) NOT NULL,
  `phone` varchar(20) NOT NULL,
  `rank` varchar(10) NOT NULL DEFAULT '회원' COMMENT '직급',
  `referred_by` int(11) DEFAULT NULL COMMENT '추천인',
  `commission_total` decimal(10,2) DEFAULT 0.00 COMMENT '수수료총액',
  `cash_points` decimal(10,2) DEFAULT 0.00 COMMENT '현금포인트',
  `mileage_points` decimal(10,2) DEFAULT 0.00 COMMENT '마일리지포인트',
  `nft_token` int(11) DEFAULT 0 COMMENT '보유한 NFT 수량',
  `myQuantity` int(11) DEFAULT 0 COMMENT '본인 누적 구매 수량',
  `myAmount` decimal(15,2) DEFAULT 0.00 COMMENT '본인 누적 구매 금액',
  `myAgent` int(11) DEFAULT 0 COMMENT '산하 총판 수',
  `myAgent_referral` int(11) DEFAULT 0 COMMENT '직접 추천한 총판 수',
  `password` varchar(255) NOT NULL,
  `referral_code` varchar(20) DEFAULT NULL COMMENT '추천인코드',
  `referral_link` varchar(255) DEFAULT NULL COMMENT '추천인링크',
  `qr_code` varchar(255) DEFAULT NULL COMMENT 'QR코드',
  `organization` varchar(100) NOT NULL,
  `reset_token` varchar(100) DEFAULT NULL,
  `reset_token_expires` datetime DEFAULT NULL,
  `created_at` timestamp NOT NULL DEFAULT current_timestamp(),
  `status` enum('active','inactive') DEFAULT 'active' COMMENT '활성화,비활성화',
  `is_admin` tinyint(1) DEFAULT 0 COMMENT '관리자인지 여부',
  `rank_change_date` date DEFAULT NULL COMMENT '승급일',
  `rank_change_reason` text DEFAULT NULL COMMENT '승급사유',
  `last_purchase_date` date DEFAULT NULL,
  `total_purchases` int(11) DEFAULT 0,
  `myTotal_quantity` int(11) DEFAULT 0 COMMENT '본인 및 산하 누적 구매 수량',
  `myTotal_Amount` decimal(15,2) DEFAULT 0.00 COMMENT '본인 및 산하 누적 구매 금액',
  `direct_volume` decimal(15,2) DEFAULT 0.00 COMMENT '직접 구매 실적',
  `referrals_volume` decimal(15,2) DEFAULT 0.00 COMMENT '직접 추천인 구매 실적',
  `ref_total_volume` decimal(15,2) unsigned DEFAULT 0.00 COMMENT '전체 하위라인 구매 실적',
  `rank_update_date` date DEFAULT NULL COMMENT '마지막 직급 업데이트 일자',
  `direct_referrals_count` int(11) DEFAULT 0 COMMENT '직접 추천한 회원 수',
  `total_distributor_count` int(11) DEFAULT 0 COMMENT '하위 총판 수',
  `special_distributor_count` int(11) DEFAULT 0 COMMENT '하위 특판 수',
  `total_referrals_count` int(11) DEFAULT 0 COMMENT '전체 추천 회원 수',
  `myPrize_used` decimal(15,2) DEFAULT 0.00 COMMENT '응모에 사용한 금액',
  `myPrize_count` int(11) DEFAULT 0 COMMENT '총 응모 횟수',
  `erc_address` varchar(256) DEFAULT NULL COMMENT 'BSC/BEP20 주소 (0x로 시작하는 42자)',
  `private_key` varchar(256) DEFAULT NULL COMMENT '암호화된 private key',
  `decrypt_key` varchar(256) DEFAULT NULL COMMENT '복호화관련표시,실행여부,일자',
  PRIMARY KEY (`id`),
  UNIQUE KEY `email` (`email`),
  UNIQUE KEY `phone` (`phone`),
  KEY `referred_by` (`referred_by`),
  KEY `idx_myTotal_quantity` (`myTotal_quantity`),
  KEY `idx_myAgent` (`myAgent`),
  KEY `idx_erc_address` (`erc_address`),
  CONSTRAINT `users_ibfk_1` FOREIGN KEY (`referred_by`) REFERENCES `users` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=30252 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci



------------------
2. orders 테이블 

CREATE TABLE `orders` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL,
  `product_id` int(11) NOT NULL,
  `price_unit` decimal(10,0) DEFAULT NULL COMMENT '단위가격',
  `quantity` int(11) NOT NULL COMMENT '수량',
  `nft_token` int(11) DEFAULT 0 COMMENT '지급된 NFT 수량',
  `total_amount` decimal(10,2) NOT NULL,
  `payment_method` varchar(100) DEFAULT NULL,
  `depositor_name` varchar(100) DEFAULT NULL,
  `cash_point_used` decimal(10,2) DEFAULT 0.00,
  `mileage_point_used` decimal(10,2) DEFAULT 0.00,
  `payment_date` datetime DEFAULT NULL,
  `status` enum('pending','paid','completed','cancelled') DEFAULT 'pending',
  `paid_status` enum('pending','completed') DEFAULT 'pending',
  `currency` char(3) DEFAULT 'KRW',
  `vat_amount` decimal(10,2) DEFAULT 0.00,
  `ip_address` varchar(45) DEFAULT NULL,
  `certificate_number` varchar(100) DEFAULT NULL,
  `order_type` varchar(256) DEFAULT 'regular',
  `updated_at` timestamp NULL DEFAULT current_timestamp() ON UPDATE current_timestamp(),
  `created_at` timestamp NULL DEFAULT current_timestamp(),
  PRIMARY KEY (`id`),
  KEY `user_id` (`user_id`),
  KEY `product_id` (`product_id`),
  CONSTRAINT `orders_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`),
  CONSTRAINT `orders_ibfk_2` FOREIGN KEY (`product_id`) REFERENCES `products` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=13190 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci




3. commissions 테이블
CREATE TABLE `commissions` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL,
  `commission_type` enum('direct_sales','distributor','special','total_distributor','special_distributor') NOT NULL COMMENT '수수료 유형',
  `amount` decimal(10,2) NOT NULL,
  `cash_point_amount` decimal(10,2) DEFAULT 0.00 COMMENT '캐시포인트로 지급된 금액',
  `mileage_point_amount` decimal(10,2) DEFAULT 0.00 COMMENT '마일리지포인트로 지급된 금액',
  `commission_rate` decimal(5,2) DEFAULT 0.00 COMMENT '적용된 수수료 비율',
  `order_id` int(11) NOT NULL COMMENT '주문 ID',
  `minus_from` int(10) DEFAULT NULL COMMENT '삭제된수당건',
  `source_user_id` int(11) NOT NULL,
  `source_amount` decimal(11,2) DEFAULT NULL COMMENT '발생매출',
  `created_at` timestamp NOT NULL DEFAULT current_timestamp(),
  PRIMARY KEY (`id`),
  KEY `user_id` (`user_id`),
  KEY `source_user_id` (`source_user_id`),
  KEY `order_id` (`order_id`),
  KEY `idx_commission_type` (`commission_type`),
  CONSTRAINT `commissions_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`),
  CONSTRAINT `commissions_ibfk_2` FOREIGN KEY (`source_user_id`) REFERENCES `users` (`id`),
  CONSTRAINT `commissions_ibfk_3` FOREIGN KEY (`order_id`) REFERENCES `orders` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=47439 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci


4. nft_history 테이블


CREATE TABLE `nft_history` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `from_user_id` int(11) DEFAULT NULL COMMENT '송신자 ID',
  `to_user_id` int(11) DEFAULT NULL COMMENT '수신자 ID',
  `amount` int(11) NOT NULL COMMENT '거래 수량',
  `transaction_date` datetime NOT NULL DEFAULT current_timestamp() COMMENT '거래 일자',
  `transaction_type` varchar(50) NOT NULL COMMENT '거래 유형 (예: 구매, 선물)',
  `order_id` int(11) DEFAULT NULL COMMENT '관련 주문 ID',
  PRIMARY KEY (`id`),
  KEY `from_user_id` (`from_user_id`),
  KEY `to_user_id` (`to_user_id`),
  CONSTRAINT `nft_history_ibfk_1` FOREIGN KEY (`from_user_id`) REFERENCES `users` (`id`),
  CONSTRAINT `nft_history_ibfk_2` FOREIGN KEY (`to_user_id`) REFERENCES `users` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=33193 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci



5. withdrawals 테이블 

CREATE TABLE `withdrawals` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL COMMENT '회원 ID',
  `bank_name` varchar(100) NOT NULL COMMENT '은행명',
  `withdrawal_amount` decimal(15,2) NOT NULL COMMENT '출금 요청 금액',
  `fee` decimal(10,0) DEFAULT NULL COMMENT '수수료',
  `account_number` varchar(100) NOT NULL COMMENT '계좌 번호',
  `account_holder` varchar(100) NOT NULL COMMENT '예금주',
  `jumin` varchar(20) DEFAULT NULL COMMENT '주민번호',
  `request_date` datetime NOT NULL DEFAULT current_timestamp() COMMENT '출금 요청 일자',
  `processed_date` datetime DEFAULT NULL COMMENT '처리 일자',
  `status` enum('pending','completed','rejected') DEFAULT 'pending' COMMENT '출금 처리 상태',
  `admin_comment` text DEFAULT NULL COMMENT '관리자 메모',
  PRIMARY KEY (`id`),
  KEY `user_id` (`user_id`),
  CONSTRAINT `withdrawals_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=291 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci


---------------
6. pricing_tiers 테이블 (새로운 테이블)
구간별 가격 및 수량을 저장하는 테이블입니다. 각 구간에서 판매된 수량에 따라 남은 수량을 관리하며, 구간이 소진되면 다음 구간으로 넘어갑니다.

CREATE TABLE `pricing_tiers` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `tier_level` INT(11) NOT NULL,            -- 구간 번호
  `price` DECIMAL(10,2) NOT NULL,           -- 구간 가격
  `total_quantity` INT(11) NOT NULL,        -- 해당 구간의 전체 판매 수량
  `remaining_quantity` INT(11) NOT NULL,    -- 해당 구간에서 남은 수량
  PRIMARY KEY (`id`)
);

기능 설명
각 구간별로 가격과 남은 수량을 관리하며, 구간이 소진되면 다음 구간으로 자동으로 넘어갑니다.

1. 구간별 가격과 판매 수량을 미리 설정하는 방식
장점:
예측 가능성: 구간별로 가격과 수량을 미리 정의해 두면, 모든 구간에 대한 정보가 사전에 명확하게 설정되어 있어 관리와 유지보수가 쉬워집니다.
관리 용이성: 각 구간이 완료될 때마다 테이블에서 다음 구간의 가격 및 수량을 자동으로 불러와 적용할 수 있습니다.
데이터 추적 용이성: 각 구간별로 판매 추이를 구체적으로 기록할 수 있어 판매량과 잔여 수량을 시각화하거나 보고할 때 유리합니다.
각 구간을 미리 설정하여 데이터베이스에 저장하고, 판매 수량이 0이 될 때마다 다음 구간을 불러오는 방식입니다.
이 테이블에 구간별 가격과 수량을 미리 저장합니다.

구현 방식:
구매가 발생할 때마다, 현재 구간에서 남은 수량을 차감합니다.
남은 수량이 0이 되면, 다음 구간의 가격과 수량을 자동으로 불러옵니다.
각 구매가 일어날 때마다 pricing_tiers 테이블을 업데이트하여 남은 수량을 기록합


function processPurchase($quantity) {
    global $db;

    // 현재 구간을 가져옵니다.
    $query = "SELECT * FROM pricing_tiers WHERE remaining_quantity > 0 ORDER BY tier_level ASC LIMIT 1";
    $result = $db->query($query);
    $current_tier = $result->fetch_assoc();
    
    $current_tier_id = $current_tier['id'];
    $remaining_quantity = $current_tier['remaining_quantity'];
    
    if ($quantity <= $remaining_quantity) {
        // 구간 내에서 충분한 수량이 있는 경우
        $new_remaining_quantity = $remaining_quantity - $quantity;
        $update_query = "UPDATE pricing_tiers SET remaining_quantity = $new_remaining_quantity WHERE id = $current_tier_id";
        $db->query($update_query);
    } else {
        // 현재 구간의 남은 수량을 모두 소진하고, 다음 구간으로 넘어가는 경우
        $next_quantity = $quantity - $remaining_quantity;
        $update_query = "UPDATE pricing_tiers SET remaining_quantity = 0 WHERE id = $current_tier_id";
        $db->query($update_query);
        // 남은 수량을 다음 구간으로 재귀 처리
        processPurchase($next_quantity);
    }
}



----------------------------------------------

config.php 설정 (수수료 정책 반영)


<?php

// 수수료 및 직급 관련 설정

// 직급 승급 조건
define('TOTAL_DISTRIBUTOR_THRESHOLD', 1000);  // 총판 승급 조건: 총 구매 수량 1000개
define('SPECIAL_DISTRIBUTOR_THRESHOLD', 10);  // 특판 승급 조건: 하위 총판 10명

// 수수료 지급 비율
define('DISTRIBUTOR_COMMISSION', 0.30);  // 총판의 하위 조직 수익 수수료: 30%
define('SPECIAL_DISTRIBUTOR_COMMISSION', 0.10);  // 특판의 하위 조직 수익 수수료: 10% (특판 제외)

// 할인율
define('DISTRIBUTOR_DISCOUNT', 0.30);  // 총판은 구매 시 30% 할인
define('SPECIAL_DISTRIBUTOR_DISCOUNT', 0.40);  // 특판은 구매 시 40% 할인

// 출금 관련 설정
define('MIN_WITHDRAWAL_AMOUNT', 50000);  // 최소 출금 금액: 5만원
define('WITHDRAWAL_FEE_RATE', 0.033);    // 출금 수수료율: 3.3%

// 기타 설정
define('PAGINATION_LIMIT', 20);  // 페이지네이션에서 한 페이지당 표시할 항목 수
define('ADMIN_EMAIL', 'admin@nftsite.com');  // 관리자 이메일

?>



---구매실적금액 200개이상(40만원)당 1회신청가능

--------------------------------
경품응모 페이지(prize_apply.php)와 이에 따른 경품응모 테이블(prize_apply)을 구성하여야 한다.
규칙 : 구매실적 40만원당 경품응모를 1회할수 있다.
제한 : 최대 200만원이상이라도 5회까지로 제한한다.

취지: 예수세례주화 1000만원상당을 200만원에 구매할수 있는 특권을 주려고 50명한정 추첨을 할텐데, 응모자격이 최소 40만원이상 누적 구매실적이 있어야 한다.
즉, members테이블의  id에서  myAmount컬럼값이 자신의 누적구매실적이다.
로그인한 누구든 이 prize_apply.php 페이지에서 접속하면, 자신의 누적구매실적이 불러오고 응모가능횟수표시되고, 응모신청을 할수 있다. 
응모신청을 하면 남은 응모횟수와 가능 금액을 표시한다. 한번신청시 마다 40만원이 누적구매실적에서 응모자격실적이 줄어든다. 

1) myAmount 컬럼값이 40만원이하이면 최소 얼마이상 구매하면 응모할수 있습니다. 
예)myAmount 컬럼값이 30만원이면 "10만원이상 구매하면" 이벤트에 응모할수 있습니다.  표시
2) myAmount 컬럼값이 40만원이상~200만원이하이면 응모가능횟수가 계산되어 표시되고, 응모신청을 할수 있다. 
예) myAmount 컬럼값이 100만원이면 응모가능횟수가 2회로 표시되고, 응모참여후에 잔여응모금액이 20만원으로 표시되고, 응모신청을 할수 있다.  
3) myAmount 컬럼값이 200만원이상이면 응모가능횟수가 5회로 고정되고, 응모신청을 할수 있다. 

홈화면이나 신청페이지에 이벤트 경쟁률 표시 :  전체 응모수/전체 50개중    예)250건응모 / 50개    5:1 경쟁률
(역동적으로 표시)
현재 응모자수 표시 : 250건
전체 경품수 : 50개


응모신청테이블(prize_apply)
번호, 응모자id, 추첨번호, 응모금액, 응모횟수, 응모일시, 응모상태, 당첨여부, ip주소
id, user_id, prize_no, apply_amount, apply_count, apply_date, apply_status, apply_prize, ip

1회당 40만원 차감, 한번에 한번만 응모신청 가능

members테이블에 추가 컬럼 추가
myAmount, 구매할때마다 누적금액은 증가한다.
myPrize_used, 응모금액 누적값, 이 누적사용액은 최대 200만원이면 5회까지 응모가능하다.
myPrize_count, 응모금액 누적값이 40만원당 1증가

응모가능여부 
myAmount - myPrize_used >= 40만원이면 응모가능




nft_token을 SERE토큰으로 스왑하는 페이지, sere_swap.php제작

모든 회원들은 users 테이블에 각자 nft_token 컬럼에 각자  nft_token 수량을 보유하고 있다. 
또한 sere_address 컬럼에 각자 보유한 SERE토큰 주소를 보유하고 있다. 개인키는 private_key 컬럼에 암호화되어 보유하고 있다. 복호화키는 decrypt_key 컬럼에 암호화되어 보유하고 있다. 
sere_swap.php 페이지에서는 각자 보유한 nft_token 수량에서, sere_address 주소로 일정수량을 이동신청을 하면, 그 신청을 받아 실제 스왑하여 SERE토큰을 해당 주소로 실제 전송해 준다.


실제 회사의 SERE토큰 보유지갑주소는  0xfdb398dd64bac32695992431340c8c710b03f945 이다.  
개인키는 ebd34ec52d70a61c078648b6238e306ee9770537496c813fda5356d5734860cc 이다. 

각 회원이 신청한 수량을 스왑하여, 회사의 sere토큰 지갑에서  각회원의 erc_address 주소로 실제 전송해 준다. 


(예시화면)
--------------------------------
회원명: 홍길동(회원번호:1234567890)

회원의 보유 nft_token 수량: 1000개
회원의 신청 수량: [100 ]개
스왑수수료 : [ 5% ] 자동계산
실제 전송된 SERE토큰 수량: [100 - 5%] = 95개  (자동계산)

*회원의 SERE토큰 주소: 0x1234567890abcdef
[신청하기]
--------------------------------

스왑신청 리스트
*신청수량합계: 1000개
--------------------------------
번호, 회원번호, 신청수량, 신청일시, 신청상태, 스왑수수료, 실제전송수량, 스왑주소, 처리일시, 트랜젝션해쉬,처리상태
--------------------------------


1.sere_swap 테이블 SQL작성하라.
2.sere_swap.php 페이지 제작하라.
3.sere_swap.php 페이지에서 회원의 보유 nft_token 수량을 불러오고, 신청수량을 입력받아, 스왑수수료를 자동계산하고, 실제 전송된 SERE토큰 수량을 자동계산하여, 회원의 SERE토큰 주소로 실제 전송해 주는 기능을 구현하라. 
4. 스왑신청이 완료되면 users 테이블의 nft_token 컬럼값에서 수량을 차감하고, 그 내역을 nft_history테이블에 내역을 저장한다. 
amount=신청수량, from_user_id=신청자아이디,  transaction_date=신청일, transaction_type="토큰스왑",  to_address="신청자의 sere토큰주소"
5.sere_swap 테이블에 신청내역을 저장하고, 그 결과를 sere_swap.php 하단 스왑신청리스트에 표시한다.
6. 처리상태는 트랜젝션해쉬값이 나오면 처리완료로 표시한다.
7.sere_swap 테이블에 트랜젝션해쉬를 저장하고, 리스트에는 트랜젝션해쉬를 bscscan의 트랜젝션 주소를 표시하여 링크가 가능하게 하라. 
8. BSC기반 SERE토큰의 전송, 조회등의 기능은 이미 sere_wallet.php페이지에 구현되어 있어 이를 참조하여 오류없이 구현하라.
9. sere_swap.php페이지와 sere_wallet.php페이지는 같은 경로에 있다.
10. sere_swap.php페이지는 sere_wallet.php페이지의 다크모드,디자인의 일관성, 페이지의 디자인을 참조하여 구현하라.
11. PHP,Html,css, Javascript 가 모두 sere_swap.php 한페이지에서 구현되도록 하라.
12. Json오류가 발생하지 않도록 하라.



CREATE TABLE `users` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(100) NOT NULL,
  `email` varchar(100) NOT NULL,
  `phone` varchar(20) NOT NULL,
  `rank` varchar(10) NOT NULL DEFAULT '회원' COMMENT '직급',
  `referred_by` int(11) DEFAULT NULL COMMENT '추천인',
  `commission_total` decimal(10,2) DEFAULT 0.00 COMMENT '수수료총액',
  `cash_points` decimal(10,2) DEFAULT 0.00 COMMENT '현금포인트',
  `mileage_points` decimal(10,2) DEFAULT 0.00 COMMENT '마일리지포인트',
  `nft_token` int(11) DEFAULT 0 COMMENT '보유한 NFT 수량',
  `myQuantity` int(11) DEFAULT 0 COMMENT '본인 누적 구매 수량',
  `myAmount` decimal(15,2) DEFAULT 0.00 COMMENT '본인 누적 구매 금액',
  `myAgent` int(11) DEFAULT 0 COMMENT '산하 총판 수',
  `myAgent_referral` int(11) DEFAULT 0 COMMENT '직접 추천한 총판 수',
  `password` varchar(255) NOT NULL,
  `referral_code` varchar(20) DEFAULT NULL COMMENT '추천인코드',
  `referral_link` varchar(255) DEFAULT NULL COMMENT '추천인링크',
  `qr_code` varchar(255) DEFAULT NULL COMMENT 'QR코드',
  `organization` varchar(100) NOT NULL,
  `reset_token` varchar(100) DEFAULT NULL,
  `reset_token_expires` datetime DEFAULT NULL,
  `created_at` timestamp NOT NULL DEFAULT current_timestamp(),
  `status` enum('active','inactive') DEFAULT 'active' COMMENT '활성화,비활성화',
  `is_admin` tinyint(1) DEFAULT 0 COMMENT '관리자인지 여부',
  `rank_change_date` date DEFAULT NULL COMMENT '승급일',
  `rank_change_reason` text DEFAULT NULL COMMENT '승급사유',
  `last_purchase_date` date DEFAULT NULL,
  `total_purchases` int(11) DEFAULT 0,
  `myTotal_quantity` int(11) DEFAULT 0 COMMENT '본인 및 산하 누적 구매 수량',
  `myTotal_Amount` decimal(15,2) DEFAULT 0.00 COMMENT '본인 및 산하 누적 구매 금액',
  `direct_volume` decimal(15,2) DEFAULT 0.00 COMMENT '직접 구매 실적',
  `referrals_volume` decimal(15,2) DEFAULT 0.00 COMMENT '직접 추천인 구매 실적',
  `ref_total_volume` decimal(15,2) unsigned DEFAULT 0.00 COMMENT '전체 하위라인 구매 실적',
  `rank_update_date` date DEFAULT NULL COMMENT '마지막 직급 업데이트 일자',
  `direct_referrals_count` int(11) DEFAULT 0 COMMENT '직접 추천한 회원 수',
  `total_distributor_count` int(11) DEFAULT 0 COMMENT '하위 총판 수',
  `special_distributor_count` int(11) DEFAULT 0 COMMENT '하위 특판 수',
  `total_referrals_count` int(11) DEFAULT 0 COMMENT '전체 추천 회원 수',
  `myPrize_used` decimal(15,2) DEFAULT 0.00 COMMENT '응모에 사용한 금액',
  `myPrize_count` int(11) DEFAULT 0 COMMENT '총 응모 횟수',
  `erc_address` varchar(256) DEFAULT NULL COMMENT 'BSC/BEP20 주소 (0x로 시작하는 42자)',
  `private_key` varchar(256) DEFAULT NULL COMMENT '암호화된 private key',
  `decrypt_key` varchar(256) DEFAULT NULL COMMENT '복호화관련표시,실행여부,일자',
  PRIMARY KEY (`id`),
  UNIQUE KEY `email` (`email`),
  UNIQUE KEY `phone` (`phone`),
  KEY `referred_by` (`referred_by`),
  KEY `idx_myTotal_quantity` (`myTotal_quantity`),
  KEY `idx_myAgent` (`myAgent`),
  KEY `idx_erc_address` (`erc_address`),
  CONSTRAINT `users_ibfk_1` FOREIGN KEY (`referred_by`) REFERENCES `users` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=30285 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci




CREATE TABLE `nft_history` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `from_user_id` int(11) DEFAULT NULL COMMENT '송신자 ID',
  `to_user_id` int(11) DEFAULT NULL COMMENT '수신자 ID',
  `amount` int(11) NOT NULL COMMENT '거래 수량',
  `transaction_date` datetime NOT NULL DEFAULT current_timestamp() COMMENT '거래 일자',
  `transaction_type` varchar(50) NOT NULL COMMENT '거래 유형 (예: 구매, 선물)',
  `order_id` int(11) DEFAULT NULL COMMENT '관련 주문 ID',
  `to_address` varchar(250) DEFAULT NULL COMMENT '전송주소',
  PRIMARY KEY (`id`),
  KEY `from_user_id` (`from_user_id`),
  KEY `to_user_id` (`to_user_id`),
  CONSTRAINT `nft_history_ibfk_1` FOREIGN KEY (`from_user_id`) REFERENCES `users` (`id`),
  CONSTRAINT `nft_history_ibfk_2` FOREIGN KEY (`to_user_id`) REFERENCES `users` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=33218 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci



sere_wallet.php에서 주요기능은 정상이다.
하단 "트랜젝션 히스토리"는 내 지갑주소로 BSC체인을 조회해서 내주소로 받거나 전송한 내역이 나타난다. 
하지만 네트워크 사정에 따라 표시가 안되기도 하고, 늦거나 사라지거나 재검색해야 다시나타난다.
이것을 방지하고자, 블록체인에 전송했거나 받거나 어쨋든 트랜젝션이 내 지갑주소에서 발생된 것은, 내 지갑주소로 받거나 전송하거나 하는 기록을 디비에 저장하고자 한다.
테이블명: wallet_history

번호, 유저아이디, 심벌, 타입, 수량, from주소, to주소, 트랜젝션해쉬, 수수료, 처리일시, 처리상태
1       12       SERE  전송  100   0x1234567890abcdef  0x1234567890abcdef  1234567890abcdef  0.000001  2024-01-01 10:00:00  처리완료

적절한 SQL문을 작성하라.
기존 sere_wallet.php에서 적당한 위치에 이 기능이 작동되도록 내역을 디비에 저장하라.
현재 블록체인 정보를 실시간 불러오는데, 자꾸 늦거나 표시가 안되고 자꾸 새로고침을 해야 표시가 된다.
어차피 이페이지에서 내 지갑주소에서 주거나 받거나 하기때문에 블록체인에 전송이 되거나 받을때 디비에 저장하여 표시하라.
이미 처리된 저장된 내역은 중복해서 저장하지 않는다. 트랜젝션해시기준 중복체크를 하여 중복되지 않도록 한다.


[성경퀴즈앱]

성경퀴즈 어플을 게임요소를 반영하여 역동적으로 제작하고자 한다.
당신은 성경퀴즈나 게임을 개발하는 전문가이고  고급개발자다.
최근에 유행하는 게임요소가 접목된 가장 트랜디하고 역동적인 성경퀴즈 게임앱을 기획하고 제안하라.
가능한 많은 사람들이 참여하고 머물수 있도록 유인요소를 부여하라.


성경문제가 각 레벨별로 출제되고, 4지선다형이며, 
문제를 풀때, 정답이면 별이나 빛이 올라가서 점수획득,  정답과 해설이 나오고.. 
오답일 경우, , 해설이 나온다.
다풀면 통계가 나온다. 레벨선택, 계속문제풀기, 다시풀기 등..



첫페이지는 대쉬보드로 프로필,실적,,차트, 통계, 문제풀기 버튼, 문제풀기 버튼, 통계 버튼, 
디비 테이블은 크게 문제컨텐츠 테이블,  나의 점수관리(레벨,보너스,보상,..)하는 테이블, 기타 테이블 등으로 구성한다.

당신이 전문가로서 아이디어를 제안하고 구현하라.
문제는 Level1, Level2, Level3 등으로 구성되고, 각 레벨별로 문제가 출제된다.  
매문제 정답시 에니메이션과 레벨마치거나 승급할때 요소요소 에니메이션 효과로 문제풀이 집중도와 관심을 높인다.
게임요소와 다크모드, 황금색 고급퀄리티, 성스러운 디자인으로 제작하라. 
당신이 어떻게 할지  가장 잘 구현된 게임앱과 성경앱을 접목시켜, 게임유형도 2개이상.. 단순문제출제형도 있고, 문제내고 선택지문이 하늘에서 비처럼 내려와서 맞추든지.. 난이도나 재미의 요소를 도입하는 아이디어를 제시하라.

필요한 디비, 테이블, 페이지, 기능, 아이디어를 종합적으로 제시하라.
당신이 본 프로젝트의 개발과 기획의 책임자다.
PHP, HTML, CSS, Javascript, mySQL디비 등 모든 기술을 사용하여 구현하라. cdn, 라이브러리 등을 활용하여 가능한 최고의 퀄리티를 구현하라.
